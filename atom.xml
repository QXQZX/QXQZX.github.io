<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QXQZX&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://letcoder.cn/"/>
  <updated>2019-09-26T02:35:43.173Z</updated>
  <id>https://letcoder.cn/</id>
  
  <author>
    <name>QXQZX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是IOC和AOP</title>
    <link href="https://letcoder.cn/2019/09/26/%E4%BB%80%E4%B9%88%E6%98%AFIOC%E5%92%8CAOP/"/>
    <id>https://letcoder.cn/2019/09/26/什么是IOC和AOP/</id>
    <published>2019-09-26T02:33:06.000Z</published>
    <updated>2019-09-26T02:35:43.173Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>IOC（Inversion Of Controll，控制反转）是一种设计思想，将原本在程序中手动创建对象的控制权，交由给Spring框架来管理。IOC容器是Spring用来实现IOC的载体，IOC容器实际上就是一个Map(key, value)，Map中存放的是各种对象。</p><p>这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。IOC容器就像是一个工厂，当需要创建一个对象，只需要配置好配置文件/注解即可，不用考虑对象是如何被创建出来的，大大增加了项目的可维护性且降低了开发难度。</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP（Aspect-Oriented Programming，面向切面编程）能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可扩展性和可维护性。使用AOP之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样可以大大简化代码量，提高了系统的扩展性。</p><p>Spring AOP是基于动态代理的，如果要代理的对象实现了某个接口，那么Spring AOP就会使用JDK动态代理去创建代理对象；而对于没有实现接口的对象，就无法使用JDK动态代理，转而使用CGlib动态代理生成一个被代理对象的子类来作为代理。</p><h3 id="Spring-AOP-AspectJ-AOP-的区别？"><a href="#Spring-AOP-AspectJ-AOP-的区别？" class="headerlink" title="Spring AOP / AspectJ AOP 的区别？"></a>Spring AOP / AspectJ AOP 的区别？</h3><p>Spring AOP属于运行时增强，而AspectJ是编译时增强。</p><p>Spring AOP基于代理（Proxying），而AspectJ基于字节码操作（Bytecode Manipulation）。</p><p>AspectJ相比于Spring AOP功能更加强大，但是Spring AOP相对来说更简单。如果切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择AspectJ，它比SpringAOP快很多。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;IOC&quot;&gt;&lt;a href=&quot;#IOC&quot; class=&quot;headerlink&quot; title=&quot;IOC&quot;&gt;&lt;/a&gt;IOC&lt;/h3&gt;&lt;p&gt;IOC（
      
    
    </summary>
    
      <category term="Java后端" scheme="https://letcoder.cn/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="https://letcoder.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Servlet生命周期</title>
    <link href="https://letcoder.cn/2019/09/19/Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://letcoder.cn/2019/09/19/Servlet生命周期/</id>
    <published>2019-09-19T14:08:42.000Z</published>
    <updated>2019-09-19T14:19:17.839Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><p><strong>生命周期：</strong> <strong>Web容器加载Servlet并将其实例化后，Servlet生命周期开始</strong>，容器运行其<strong>init()方法</strong>进行Servlet的初始化；请求到达时调用Servlet的<strong>service()方法</strong>，service()方法会根据需要调用与请求对应的<strong>doGet或doPost</strong>等方法；当服务器关闭或项目被卸载时服务器会将Servlet实例销毁，此时会调用Servlet的<strong>destroy()方法</strong>。<strong>init方法和destroy方法只会执行一次，service方法客户端每次请求Servlet都会执行</strong>。Servlet中有时会用到一些需要初始化与销毁的资源，因此可以把初始化资源的代码放入init方法中，销毁资源的代码放入destroy方法中，这样就不需要每次处理客户端的请求都要初始化与销毁资源。</p><p>综上：</p><p>Servlet生命周期分为三个阶段：</p><ol><li>初始化阶段 调用init()方法, 只执行一次</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--默认情况下，第一次被访问时，Servlet被创建，然后执行init方法；</span><br><span class="line"></span><br><span class="line">--可以配置执行Servlet的创建时机；</span><br><span class="line"></span><br><span class="line">--可以配置执行Servlet的创建时机；</span><br></pre></td></tr></table></figure><p></p><ol start="2"><li><p>响应客户请求阶段 调用service()方法 处理doGet和doPost方法，执行多次</p></li><li><p>终止阶段　当Servlet服务器正常关闭时，执行destroy方法，只执行一次</p></li></ol><p><br></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//servlet生命周期，的三个方法，</span></span><br><span class="line"><span class="comment">//1.被创建，执行且只执行一次init方法，</span></span><br><span class="line"><span class="comment">//2.提供服务，执行service方法，执行多次 </span></span><br><span class="line"><span class="comment">//3.被销毁，当Servlet服务器正常关闭时，执行destroy方法，只执行一次。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">super</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">super</span>.service(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  <span class="keyword">super</span>.destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;strong&gt;生命周期：&lt;/strong&gt; &lt;strong&gt;Web容器加载Servlet并将其实例化后，Servlet生命周期开始&lt;/strong&gt;
      
    
    </summary>
    
      <category term="Java后端" scheme="https://letcoder.cn/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="https://letcoder.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型学习</title>
    <link href="https://letcoder.cn/2019/09/17/Java%E6%B3%9B%E5%9E%8B%E5%AD%A6%E4%B9%A0/"/>
    <id>https://letcoder.cn/2019/09/17/Java泛型学习/</id>
    <published>2019-09-17T11:28:14.000Z</published>
    <updated>2019-09-26T02:35:15.646Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><p>我们在集合中会大量使用到泛型，这里来完整地学习泛型知识。</p><p>泛型，用来灵活地将数据类型应用到不同的类、方法、接口当中。将数据类型作为参数进行传递。</p><a id="more"></a><h2 id="定义和使用含有泛型的类"><a href="#定义和使用含有泛型的类" class="headerlink" title="定义和使用含有泛型的类"></a>定义和使用含有泛型的类</h2><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名&lt;代表泛型的变量&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，API中的ArrayList集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt;</span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123; &#125;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>使用泛型： 即什么时候确定泛型。<strong>在创建对象的时候确定泛型</strong></p><p>例如，<code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code></p></li></ol><p>此时，变量E的值就是String类型了, 那么我们的类型就可以理解为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">String</span>&gt;</span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String e)</span></span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;  &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再例如，<code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</code></p><p>此时，变量E的值就是Integer类型,那么我们的类型就可以理解为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">Integer</span>&gt; </span>&#123; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Integer e)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Integer <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  &#125;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>2.举例自定义泛型类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericClass</span>&lt;<span class="title">MVP</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//没有MVP类型，在这里代表 未知的一种数据类型 未来传递什么就是什么类型</span></span><br><span class="line"><span class="keyword">private</span> MVP mvp;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMVP</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mvp = mvp;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> MVP <span class="title">getMVP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClassDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">         <span class="comment">// 创建一个泛型为String的类</span></span><br><span class="line">         MyGenericClass&lt;String&gt; my = <span class="keyword">new</span> MyGenericClass&lt;String&gt;();    </span><br><span class="line">         <span class="comment">// 调用setMVP</span></span><br><span class="line">         my.setMVP(<span class="string">"大胡子登登"</span>);</span><br><span class="line">         <span class="comment">// 调用getMVP</span></span><br><span class="line">         String mvp = my.getMVP();</span><br><span class="line">         System.out.println(mvp);</span><br><span class="line">         <span class="comment">//创建一个泛型为Integer的类</span></span><br><span class="line">         MyGenericClass&lt;Integer&gt; my2 = <span class="keyword">new</span> MyGenericClass&lt;Integer&gt;(); </span><br><span class="line">         my2.setMVP(<span class="number">123</span>);     </span><br><span class="line">         Integer mvp2 = my2.getMVP();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="含有泛型的方法"><a href="#含有泛型的方法" class="headerlink" title="含有泛型的方法"></a>含有泛型的方法</h3><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数) &#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericMethod</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">    System.out.println(mvp.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> &lt;MVP&gt; <span class="function">MVP <span class="title">show2</span><span class="params">(MVP mvp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mvp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：<strong>调用方法时，确定泛型的类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        MyGenericMethod mm = <span class="keyword">new</span> MyGenericMethod();</span><br><span class="line">        <span class="comment">// 演示看方法提示</span></span><br><span class="line">        mm.show(<span class="string">"aaa"</span>);</span><br><span class="line">        mm.show(<span class="number">123</span>);</span><br><span class="line">        mm.show(<span class="number">12.45</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="含有泛型的接口"><a href="#含有泛型的接口" class="headerlink" title="含有泛型的接口"></a>含有泛型的接口</h3><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 interface 接口名&lt;代表泛型的变量&gt; &#123;  &#125;</span><br></pre></td></tr></table></figure><p>例如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getE</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：</p><p><strong>1、定义类时确定泛型的类型</strong></p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp1</span> <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，泛型E的值就是String类型。</p><p><strong>2、始终不确定泛型的类型，直到创建对象时，确定泛型的类型</strong></p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImp2</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyGenericInterface</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定泛型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyImp2&lt;String&gt;  my = <span class="keyword">new</span> MyImp2&lt;String&gt;();  </span><br><span class="line">        my.add(<span class="string">"aa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h2 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h2><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示。但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h4 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h4><p>泛型的通配符:<strong>不知道使用什么类型来接收的时候,此时可以使用?,?表示未知通配符。</strong></p><p>此时只能接受数据,不能往该集合中存储数据。</p><p>举个例子大家理解使用即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Intger&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    getElement(list1);</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    getElement(list2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement</span><span class="params">(Collection&lt;?&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//？代表可以接收任意类型</span></span><br></pre></td></tr></table></figure><blockquote><p>tips:泛型不存在继承关系 Collection<object>list = new ArrayList<string>();这种是错误的。</string></object></p></blockquote><p><br></p><h4 id="通配符高级使用—-受限泛型"><a href="#通配符高级使用—-受限泛型" class="headerlink" title="通配符高级使用—-受限泛型"></a>通配符高级使用—-受限泛型</h4><p>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在JAVA的泛型中可以指定一个泛型的<strong>上限</strong>和<strong>下限</strong>。</p><p><strong>泛型的上限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? extends 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其子类</code></li></ul><p><strong>泛型的下限</strong>：</p><ul><li><strong>格式</strong>： <code>类型名称 &lt;? super 类 &gt; 对象名称</code></li><li><strong>意义</strong>： <code>只能接收该类型及其父类型</code></li></ul><p>比如：现已知Object类，String 类，Number类，Integer类，其中Number是Integer的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">    Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    </span><br><span class="line">    getElement(list1);</span><br><span class="line">    getElement(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement(list3);</span><br><span class="line">    getElement(list4);<span class="comment">//报错</span></span><br><span class="line">  </span><br><span class="line">    getElement2(list1);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list2);<span class="comment">//报错</span></span><br><span class="line">    getElement2(list3);</span><br><span class="line">    getElement2(list4);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>#</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;我们在集合中会大量使用到泛型，这里来完整地学习泛型知识。&lt;/p&gt;&lt;p&gt;泛型，用来灵活地将数据类型应用到不同的类、方法、接口当中。将数据类型作为参数进行传递。&lt;/p&gt;
    
    </summary>
    
      <category term="Java底层" scheme="https://letcoder.cn/categories/Java%E5%BA%95%E5%B1%82/"/>
    
    
      <category term="Java" scheme="https://letcoder.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中的堆区、栈区、方法区</title>
    <link href="https://letcoder.cn/2019/09/15/Java%E5%A0%86%E6%A0%88/"/>
    <id>https://letcoder.cn/2019/09/15/Java堆栈/</id>
    <published>2019-09-15T12:33:09.000Z</published>
    <updated>2019-09-26T02:35:21.108Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:48 GMT+0800 (中国标准时间) --><p>JAVA的JVM的内存可分为3个区：堆(heap)、栈(stack)和方法区(method)</p><p><br></p><h3 id="栈区"><a href="#栈区" class="headerlink" title="栈区:"></a>栈区:</h3><ol><li><strong>每个线程包含一个栈区</strong>，栈中只保存方法中（不包括对象的成员变量）的<strong>基础数据类型和自定义对象的引用(不是对象)</strong>，对象都存放在堆区中</li><li>每个栈中的数据(原始类型和对象引用)都是私有的，其他栈不能访问。</li><li>栈分为3个部分：基本类型变量区、执行环境上下文、操作指令区(存放操作指令)</li></ol><p><br><br></p><h3 id="堆区"><a href="#堆区" class="headerlink" title="堆区:"></a>堆区:</h3><ol><li>存储的全部是对象实例，每个对象都包含一个与之对应的class的信息(class信息存放在方法区)。</li><li><strong>jvm只有一个堆区(heap)被所有线程共享</strong>，堆中不存放基本类型和对象引用，只存放对象本身，几乎所有的<strong>对象实例和数组</strong>都在堆中分配。</li></ol><p><br><br></p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区:"></a>方法区:</h3><ol><li>又叫静态区，跟堆一样，被所有的线程共享。它用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;JAVA的JVM的内存可分为3个区：堆(heap)、栈(stack)和方法区(method)&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h3 id=&quot;栈区&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Java底层" scheme="https://letcoder.cn/categories/Java%E5%BA%95%E5%B1%82/"/>
    
    
      <category term="Java" scheme="https://letcoder.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>centos修改mysql root账户密码</title>
    <link href="https://letcoder.cn/2019/09/05/centos%E4%BF%AE%E6%94%B9mysql-root%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <id>https://letcoder.cn/2019/09/05/centos修改mysql-root账户密码/</id>
    <published>2019-09-05T12:04:29.000Z</published>
    <updated>2019-09-05T12:18:20.325Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><h3 id="第一步修改my-cnf文件"><a href="#第一步修改my-cnf文件" class="headerlink" title="第一步修改my.cnf文件"></a>第一步修改my.cnf文件</h3><ol><li><p>vim /etc/my.cnf</p></li><li><p>在[mysqld]中添加 skip-grant-tables</p></li></ol><p>例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="meta">skip-grant-tables</span> <span class="string"># 添加这行</span></span><br><span class="line"><span class="comment"># skip-grant-tables=1</span></span><br><span class="line"><span class="attr">datadir</span>=<span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">socket</span>=<span class="string">/var/lib/mysql/mysql.sock</span></span><br></pre></td></tr></table></figure><p>重启mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure><p><br></p><h3 id="第二步用户无密码登录"><a href="#第二步用户无密码登录" class="headerlink" title="第二步用户无密码登录"></a>第二步用户无密码登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p (直接点击回车，密码为空)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="第三步选择数据库修改root密码"><a href="#第三步选择数据库修改root密码" class="headerlink" title="第三步选择数据库修改root密码"></a>第三步选择数据库修改root密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update mysql.user set authentication_string=password(&apos;新密码&apos;) where User=&apos;用户&apos;;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="第四步刷新并退出"><a href="#第四步刷新并退出" class="headerlink" title="第四步刷新并退出"></a>第四步刷新并退出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="第五步编辑my-cnf并重启mysql"><a href="#第五步编辑my-cnf并重启mysql" class="headerlink" title="第五步编辑my.cnf并重启mysql"></a>第五步编辑my.cnf并重启mysql</h3><p><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="comment"># 删除 skip-grant-tables  保存退出</span></span><br><span class="line">service mysql restart  <span class="comment"># 重启mysql</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="http://www.jb51.net/article/100211.htm" target="_blank" rel="noopener">文章1</a></li><li><a href="https://www.cnblogs.com/jekaysnow/p/8849533.html" target="_blank" rel="noopener">文章2</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;第一步修改my-cnf文件&quot;&gt;&lt;a href=&quot;#第一步修改my-cnf文件&quot; class=&quot;headerlink&quot; title=&quot;第一步修
      
    
    </summary>
    
      <category term="Mysql" scheme="https://letcoder.cn/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://letcoder.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql忘记密码解决方案</title>
    <link href="https://letcoder.cn/2019/09/04/Mysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://letcoder.cn/2019/09/04/Mysql忘记密码解决方案/</id>
    <published>2019-09-04T13:02:38.000Z</published>
    <updated>2019-09-04T13:05:02.021Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><p>Mysql 忘记了密码 解决方案：</p><p><br></p><ol><li>Cmd – &gt; 停止mysql服务 （以管理员的身份） net stop mysql;</li><li>使用无验证方式启动mysql mysqld –skip-grant-tables</li><li>打开新的cmd窗口，直接输入mysql 回车 登录成功</li><li>依次执行 use mysql; set password for “root”@”localhost” = password(“新密码”);</li><li>手动执行mysqld的进程</li><li>启动mysql服务 net start mysql;</li><li>使用新密码登录</li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Mysql 忘记了密码 解决方案：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Cmd – &amp;gt; 停止mysql服务 （以管理员的身份） net 
      
    
    </summary>
    
      <category term="Mysql" scheme="https://letcoder.cn/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://letcoder.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>springMVC配置定时任务</title>
    <link href="https://letcoder.cn/2019/08/24/springMVC%E9%85%8D%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://letcoder.cn/2019/08/24/springMVC配置定时任务/</id>
    <published>2019-08-24T13:31:22.000Z</published>
    <updated>2019-08-24T13:32:05.974Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><h2 id="springMVC配置定时执行任务"><a href="#springMVC配置定时执行任务" class="headerlink" title="springMVC配置定时执行任务"></a>springMVC配置定时执行任务</h2><h3 id="配置xml"><a href="#配置xml" class="headerlink" title="配置xml"></a>配置xml</h3><p>在SpringMVC配置文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xmlns:task="http://www.springframework.org/schema/task" </span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/task  </span><br><span class="line">http://www.springframework.org/schema/task/spring-task-4.3.xsd</span><br></pre></td></tr></table></figure><p>配置任务扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;task:annotation-driven /&gt;</span><br></pre></td></tr></table></figure><p>配置扫描任务位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描任务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx.task"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>如下图：</p><p><img src="https://iqxqzx.gitee.io/pic/images/2019/8/24/1.png" alt="img"></p><p><strong>Demo：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kaoqin.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/5 * * * * ? "</span>) <span class="comment">// 间隔5秒执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">taskCycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用SpringMVC框架配置定时任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>1、spring的 @Scheduled 注解 需要写在实现方法上</p><p>2、 定时器的任务方法不能有返回值（如果有返回值，spring初始化的时候会告诉你有个错误、需要设定一个proxytargetclass的某个值为true）</p><p>3、实现类上要有组件的注解@Component</p><p><strong>扩展：定时时间的设置</strong></p><p>如：“0/5 <em></em> <em></em> ?”</p><p>CronTrigger配置完整格式为： [秒] [分] [小时] [日] [月] [周] [年]</p><table><thead><tr><th>序号</th><th>说明</th><th>是否必填</th><th>允许填写的值</th><th>允许的通配符</th></tr></thead><tbody><tr><td>1</td><td>秒</td><td>是</td><td>0-59</td><td>, - * /</td></tr><tr><td>2</td><td>分</td><td>是</td><td>0-59</td><td>, - * /</td></tr><tr><td>3</td><td>小时</td><td>是</td><td>0-23</td><td>, - * /</td></tr><tr><td>4</td><td>日</td><td>是</td><td>1-31</td><td>, - * ? / L W</td></tr><tr><td>5</td><td>月</td><td>是</td><td>1-12或JAN-DEC</td><td>, - * /</td></tr><tr><td>6</td><td>周</td><td>是</td><td>1-7或SUN-SAT</td><td>, - * ? / L W</td></tr><tr><td>7</td><td>年</td><td>否</td><td>empty 或1970-2099</td><td>, - * /</td></tr></tbody></table><p>通配符说明:</p><p>* 表示所有值. 例如:在分的字段上设置 “*”,表示每一分钟都会触发。</p><p>? 表示不指定值。使用的场景为不需要关心当前设置这个字段的值。</p><p>例如:要在每月的10号触发一个操作，但不关心是周几，所以需要周位置的那个字段设置为”?” 具体设置为 0 0 0 10 * ?</p><p>- 表示区间。例如 在小时上设置 “10-12”,表示 10,11,12点都会触发。</p><p>, 表示指定多个值，例如在周字段上设置 “MON,WED,FRI” 表示周一，周三和周五触发</p><p>/ 用于递增触发。如在秒上面设置”5/15” 表示从5秒开始，每增15秒触发(5,20,35,50)。 在月字段上设置’1/3’所示每月1号开始，每隔三天触发一次。</p><p>L 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年[leap]), 在周字段上表示星期六，相当于”7”或”SAT”。如果在”L”前加上数字，则表示该数据的最后一个。例如在周字段上设置”6L”这样的格式,则表示“本月最后一个星期五”</p><p>W 表示离指定日期的最近那个工作日(周一至周五). 例如在日字段上设置”15W”，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发.如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 “1W”,它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，”W”前只能设置具体的数字,不允许区间”-“).</p><p># 序号(表示每月的第几个周几)，例如在周字段上设置”6#3”表示在每月的第三个周六.注意如果指定”#5”,正好第五周没有周六，则不会触发该配置(用在母亲节和父亲节再合适不过了) ；</p><p><strong>小提示：</strong><br>‘L’和 ‘W’可以组合使用。如果在日字段上设置”LW”,则表示在本月的最后一个工作日触发；<br>周字段的设置，若使用英文字母是不区分大小写的，即MON 与mon相同；</p><p>参考：</p><p><a href="https://wuzhuti.cn/850.html/comment-page-1/" target="_blank" rel="noopener">https://wuzhuti.cn/850.html/comment-page-1/</a></p><p><a href="https://wuzhuti.cn/447.html" target="_blank" rel="noopener">https://wuzhuti.cn/447.html</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;h2 id=&quot;springMVC配置定时执行任务&quot;&gt;&lt;a href=&quot;#springMVC配置定时执行任务&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Java后端" scheme="https://letcoder.cn/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="https://letcoder.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>表单onsubmit事件无效&amp;表单onsubmit后使用ajax无效解决</title>
    <link href="https://letcoder.cn/2019/08/17/%E8%A1%A8%E5%8D%95onsubmit%E4%BA%8B%E4%BB%B6%E6%97%A0%E6%95%88-%E8%A1%A8%E5%8D%95onsubmit%E5%90%8E%E4%BD%BF%E7%94%A8ajax%E6%97%A0%E6%95%88%E8%A7%A3%E5%86%B3/"/>
    <id>https://letcoder.cn/2019/08/17/表单onsubmit事件无效-表单onsubmit后使用ajax无效解决/</id>
    <published>2019-08-17T12:02:47.000Z</published>
    <updated>2019-08-17T12:30:10.598Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><p>这段时间在写一个h5+app，用于一个组队比赛项目的app。由于自身也没有多少前端开发的经验，也就是闷着头一直乱写，在开发中也遇到了各种难题。</p><p>今天又解决一发问题，(此处需要掌声)， 成就感！</p><h3 id="关于登录表单submit的问题"><a href="#关于登录表单submit的问题" class="headerlink" title="关于登录表单submit的问题"></a>关于登录表单submit的问题</h3><p>这个过程需要用到的技术主要就是ajax技术和js的onsubmit技术。</p><p>过程如下：</p><blockquote><p>1.用户输入 用户名和密码</p><p>2.当用户点击提交按钮时，利用ajax请求后端接口 进行用户名密码验证。</p></blockquote><p>但是这时候出现一个问题，就是当 用户点击输入法的 <strong>发送</strong> <strong>提交</strong> 按钮的时候，我们怎么验证</p><p>这时候就需要原生js的 onsubmit 方法了</p><blockquote><p>3.1 验证不通过，onsubmit返回false，表单无法提交，页面提示用户密码有错。</p><p>3.2 验证通过，onsubmit返回true，表单提交，服务器返回用户内部视图，登陆成功。</p></blockquote><p>废话不说上代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击手机键盘  提交按钮</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"login"</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  subData();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 点击登录按钮</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"login-btn"</span>).addEventListener(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  subData();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取表单数据</span></span><br><span class="line">  <span class="keyword">var</span> data = getFormData(<span class="string">"login"</span>);</span><br><span class="line">  </span><br><span class="line">  mui.ajax(<span class="string">'http://192.168.1.142:8080/user/login.do'</span>, &#123;</span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="string">'username'</span>: data.username,</span><br><span class="line">      <span class="string">'password'</span>: data.password</span><br><span class="line">    &#125;),</span><br><span class="line">    dataType: <span class="string">'json'</span>, <span class="comment">//服务器返回json格式数据</span></span><br><span class="line">    type: <span class="string">'post'</span>, <span class="comment">//HTTP请求类型</span></span><br><span class="line">    timeout: <span class="number">10000</span>, <span class="comment">//超时时间设置为10秒；</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  async: false, // 同步方式是为了解决   手机键盘提交按钮 提交表单验证bug的</span></span><br><span class="line">    </span><br><span class="line">    contentType: <span class="string">'application/json;charset=utf-8'</span>, <span class="comment">// 少了会报错</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">      <span class="keyword">if</span> (data.status == <span class="number">200</span>) &#123;</span><br><span class="line">        mui.toast(<span class="string">"登录成功"</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.status == <span class="number">-200</span>) &#123;</span><br><span class="line">        mui.toast(<span class="string">"登录失败，请重新登录"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, type, errorThrown</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果用上面的代码，点击手机键盘 提交按钮 是无法完成验证操作的、</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>上面代码用的是 异步的方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">checkpwd</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//1............</span></span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//2........</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">//3.........</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li><p>如果是同步方式：当1执行完毕后，接着执行ajax，线程会处于等待状态，等2执行完毕之后，接着执行3.</p></li><li><p>如果是异步方式：当1执行完毕之后，接着执行ajax，但是ajax不会阻塞主线程，ajax执行的同时会执行3.</p></li></ul><p><br></p><p>下面展示错误的ajax验证方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击手机键盘  提交按钮</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"login"</span>).onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1........</span></span><br><span class="line">  </span><br><span class="line">  mui.ajax(<span class="string">'http://192.168.1.142:8080/user/login.do'</span>, &#123;</span><br><span class="line">    <span class="comment">// 2.......</span></span><br><span class="line">    data: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      <span class="string">'username'</span>: data.username,</span><br><span class="line">      <span class="string">'password'</span>: data.password</span><br><span class="line">    &#125;),</span><br><span class="line">    dataType: <span class="string">'json'</span>, <span class="comment">//服务器返回json格式数据</span></span><br><span class="line">    type: <span class="string">'post'</span>, <span class="comment">//HTTP请求类型  </span></span><br><span class="line">    contentType: <span class="string">'application/json;charset=utf-8'</span>, <span class="comment">// 少了会报错</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"success"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, type, errorThrown</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3........</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>上面的代码， 先执行 1 后 执行 2 。但是2 (ajax) 不会阻塞主线程，2 (ajax) 执行的同时会执行3. 这时候3 没等验证成功，立马返回false</strong></p><p>因此，当使用异步方式进行验证的时候，会出现无论如何，onsubmit（onclick）都不会起作用，这会让程序员感觉自己的代码有问题，其实代码没问题，是逻辑的问题。要解决这个问题，我们就必须用ajax的同步方式。</p><p><br></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>改为同步方式 ajax 中添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> : <span class="literal">false</span>,</span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://my.oschina.net/qkmc/blog/872778" target="_blank" rel="noopener">文章1</a></li><li><a href></a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;这段时间在写一个h5+app，用于一个组队比赛项目的app。由于自身也没有多少前端开发的经验，也就是闷着头一直乱写，在开发中也遇到了各种难题。&lt;/p&gt;
      
    
    </summary>
    
      <category term="HTML5+APP" scheme="https://letcoder.cn/categories/HTML5-APP/"/>
    
    
      <category term="Web移动端" scheme="https://letcoder.cn/tags/Web%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis查询parameterType多参数问题</title>
    <link href="https://letcoder.cn/2019/08/15/Mybatis%E6%9F%A5%E8%AF%A2parameterType%E5%A4%9A%E5%8F%82%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>https://letcoder.cn/2019/08/15/Mybatis查询parameterType多参数问题/</id>
    <published>2019-08-15T13:32:45.000Z</published>
    <updated>2019-08-15T13:48:07.978Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><h2 id="Mybatis查询parameterType多参数问题"><a href="#Mybatis查询parameterType多参数问题" class="headerlink" title="Mybatis查询parameterType多参数问题"></a>Mybatis查询parameterType多参数问题</h2><h3 id="一、单个参数："><a href="#一、单个参数：" class="headerlink" title="一、单个参数："></a>一、单个参数：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">List&lt;EntInfo&gt; <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"findByUsername"</span> resultMap=<span class="string">"EntInfoResultMap"</span> parameterType=<span class="string">"java.lang.String"</span> &gt;</span><br><span class="line">.......</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>其中方法名和ID一致，#{} 中的参数名与方法中的参数名一致， 这里采用的是@Param这个参数，实际上@Param这个最后会被Mabatis封装为map类型的。</p><p>select 后的字段列表要和bean中的属性名一致， 如果不一致的可以用 as 来补充。</p><h3 id="二、多参数："><a href="#二、多参数：" class="headerlink" title="二、多参数："></a>二、多参数：</h3><p>方案1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;XXX&gt; <span class="title">getXXX</span><span class="params">(String xxId, String xxCode)</span></span>;  </span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getXXX"</span> resultType=<span class="string">"XXX"</span>&gt; <span class="comment">// 不需要写parameterType参数</span></span><br><span class="line"></span><br><span class="line">　　select t.* from tableName where id = #&#123;0&#125; and name = #&#123;1&#125;  </span><br><span class="line"></span><br><span class="line">&lt;/select&gt;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于是多参数那么就不能使用parameterType， 改用#｛index｝是第几个就用第几个的索引，索引从0开始</span></span><br></pre></td></tr></table></figure><p>方案2（推荐）基于注解</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;XXXBean&gt; <span class="title">getXXXBeanList</span><span class="params">(@Param(<span class="string">"id"</span>)</span>String id, @<span class="title">Param</span><span class="params">(<span class="string">"code"</span>)</span>String code)</span>;  </span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getXXXBeanList"</span> resultType=<span class="string">"XXBean"</span>&gt;</span><br><span class="line"></span><br><span class="line">　　select t.* from tableName where id = #&#123;id&#125; and name = #&#123;code&#125;  </span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>由于是多参数那么就不能使用parameterType， 这里用@Param来指定哪一个。</p><h3 id="三、map封装多参数："><a href="#三、map封装多参数：" class="headerlink" title="三、map封装多参数："></a>三、map封装多参数：</h3><p>通过传入map对象查询 并返回user对象的list集合</p><p>直接通过map里面的key直接访问 #{key}</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsersByMap</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="number">3</span>. 通过传入map对象查询 并返回user对象的list集合  map里面的属性直接访问 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"findUsersByMap"</span> parameterType=<span class="string">"hashmap"</span> resultType=<span class="string">"user"</span>&gt;</span><br><span class="line">    select * from users where sex=#&#123;sex&#125; and username =#&#123;name&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="四、List封装多个参数："><a href="#四、List封装多个参数：" class="headerlink" title="四、List封装多个参数："></a>四、List封装多个参数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;XXX&gt; <span class="title">getXXX</span><span class="params">(List&lt;String&gt; list)</span></span>;  </span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"getXXXBeanList"</span> resultType=<span class="string">"XXBean"</span>&gt;</span><br><span class="line">　　select 字段... from XXX where id in</span><br><span class="line">　　&lt;foreach item=<span class="string">"item"</span> index=<span class="string">"index"</span> collection=<span class="string">"list"</span> open=<span class="string">"("</span> separator=<span class="string">","</span> close=<span class="string">")"</span>&gt;  </span><br><span class="line">　　　　#&#123;item&#125;  </span><br><span class="line">　　&lt;/foreach&gt;  </span><br><span class="line">&lt;/select&gt;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// foreach 最后的效果是select 字段... from XXX where id in ('1','2','3','4')</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;h2 id=&quot;Mybatis查询parameterType多参数问题&quot;&gt;&lt;a href=&quot;#Mybatis查询parameterType多参数问题&quot; cl
      
    
    </summary>
    
      <category term="Java后端" scheme="https://letcoder.cn/categories/Java%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="https://letcoder.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HTML5+app实现文件上传(java后端)</title>
    <link href="https://letcoder.cn/2019/08/13/HTML5-app%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-java%E5%90%8E%E7%AB%AF/"/>
    <id>https://letcoder.cn/2019/08/13/HTML5-app实现文件上传-java后端/</id>
    <published>2019-08-13T12:18:59.000Z</published>
    <updated>2019-08-15T13:34:33.681Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><p>以拍照上传，相册选择图片上传为例</p><h3 id="HTML5-Plus-拍照或者相册选择图片上传到服务器"><a href="#HTML5-Plus-拍照或者相册选择图片上传到服务器" class="headerlink" title="HTML5 Plus 拍照或者相册选择图片上传到服务器"></a>HTML5 Plus 拍照或者相册选择图片上传到服务器</h3><p><br></p><p>起因：正在写一个人脸识别打卡签到的webApp，其中需要一个拍摄照片并上传服务器的功能</p><p>通过阅读<a href="http://www.html5plus.org/doc" target="_blank" rel="noopener">h5+官方文档</a> 了解到有相册 、相机、 文件上传等接口</p><h4 id="下面学习这几个api："><a href="#下面学习这几个api：" class="headerlink" title="下面学习这几个api："></a>下面学习这几个api：</h4><p>1、从图库选择图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">plus.gallery.pick(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;       <span class="comment">// path为选择图片的路径</span></span><br><span class="line">    <span class="comment">// 下面将图片显示在界面</span></span><br><span class="line">    hui(<span class="string">'#img3 div'</span>).hide();</span><br><span class="line">    hui(<span class="string">'#img3 img'</span>).attr(<span class="string">'src'</span>, path);</span><br><span class="line">    hui(<span class="string">'#img3 img'</span>).show();</span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    imgUpload(path);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    hui.toast(<span class="string">"上传失败"</span>);</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    filter: <span class="string">'image'</span>,</span><br><span class="line">    system: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 选择多张图片</span></span><br><span class="line">plus.gallery.pick(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">paths</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> paths.files)&#123;</span><br><span class="line">      hui.toast(paths.files[i]);</span><br><span class="line">      <span class="comment">//imgUpload(path);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    hui.toast(<span class="string">'取消了选择'</span>);</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    filter: <span class="string">'image'</span>,</span><br><span class="line">    multiple: <span class="literal">true</span>,</span><br><span class="line">    maximum: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><br></p><p>2、相机获取图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plus.camera.getCamera().captureImage(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个path 不能直接使用 是相对的  需要进行路径转换</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">"file://"</span> + plus.io.convertLocalFileSystemURL(path); <span class="comment">// 路径转换</span></span><br><span class="line">    hui(<span class="string">'#img2 div'</span>).hide();</span><br><span class="line">    hui(<span class="string">'#img2 img'</span>).attr(<span class="string">'src'</span>, path);</span><br><span class="line">    hui(<span class="string">'#img2 img'</span>).show();</span><br><span class="line">    imgUpload(path);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    hui.toast(<span class="string">"上传失败"</span>);</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    index: <span class="number">2</span> <span class="comment">// 拍照时默认的摄像头 1后置 2 前置</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><br></p><p>3、uploader文件上传</p><p>原理应该就是通过http 的post请求上传文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片上传（java后端测试成功）</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; path</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgUpload</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  plus.nativeUI.showWaiting();</span><br><span class="line">  <span class="keyword">var</span> task = plus.uploader.createUpload(</span><br><span class="line">    <span class="string">'http://192.168.1.142:8080/img/upload.do'</span>, &#123;</span><br><span class="line">      method: <span class="string">"POST"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">resp, status</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (status == <span class="number">200</span>) &#123;</span><br><span class="line">        plus.nativeUI.closeWaiting();</span><br><span class="line">        <span class="built_in">console</span>.log(resp.responseText);</span><br><span class="line">        mui.toast(<span class="string">'上传成功'</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mui.toast(<span class="string">'上传失败'</span>);</span><br><span class="line">        plus.nativeUI.closeWaiting();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  task.addFile(path, &#123;<span class="attr">key</span>: <span class="string">'file'</span>&#125;); <span class="comment">// 这里必须和 java后端的 @RequestParam(value = "file") 对应</span></span><br><span class="line">  task.addData(<span class="string">"name"</span>, <span class="string">"test"</span>);</span><br><span class="line">  task.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码就是上述所写，server为上传的服务端接口地址，如果上传成功，则回调的status会返回200，不成功或者接口参数有问题会返回400或者500。</p><p>resp.responseText 服务端返回的结果，一般服务端会返回json，解析一下json就可以使用了。</p><p><br></p><p>传输其他文件时如果还想添加其他参数，用.addData(key,value),</p><p>添加图片用.addFile(图片路径，{key:后端接收文件的名字})， <strong>这个key必须和后端接收名字对应</strong></p><p>配合后端代码看会好理解，后端我用java接收的：</p><p><br></p><p>4、Java后端接收并保存</p><p>用标准的MultipartFile接收即可。注意xml限制的大小设定</p><p>springMVC.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--单位字节--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"20480000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>, produces = <span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">uploadImg</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>)</span> MultipartFile file, HttpServletRequest request) </span>&#123;</span><br><span class="line">  Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    String oriFilename = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件后缀</span></span><br><span class="line">    String fileType = oriFilename.substring(oriFilename.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>, oriFilename.length()).toLowerCase();</span><br><span class="line">    <span class="comment">// 存储路径</span></span><br><span class="line">    String basePath = <span class="string">"/Users/qxqzx/Desktop/img/"</span>;</span><br><span class="line">    <span class="comment">// 保存的文件名字</span></span><br><span class="line">    String saveName = String.valueOf(<span class="keyword">new</span> Date().getTime()) + <span class="string">"."</span> + fileType;</span><br><span class="line">    File dst = <span class="keyword">new</span> File(basePath, saveName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dst.getParentFile().exists()) &#123;</span><br><span class="line">      dst.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    file.transferTo(dst); <span class="comment">// 写入本地</span></span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</span><br><span class="line">    map.put(<span class="string">"code"</span>, <span class="string">"200"</span>);</span><br><span class="line">    map.put(<span class="string">"msg"</span>, <span class="string">"图片上传成功！"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    map.put(<span class="string">"success"</span>, <span class="keyword">false</span>);</span><br><span class="line">    map.put(<span class="string">"code"</span>, <span class="string">"-200"</span>);</span><br><span class="line">    map.put(<span class="string">"msg"</span>, <span class="string">"图片上传失败！"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> JSON.toJSONString(map);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时总结到这, 等后续补充</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;以拍照上传，相册选择图片上传为例&lt;/p&gt;&lt;h3 id=&quot;HTML5-Plus-拍照或者相册选择图片上传到服务器&quot;&gt;&lt;a href=&quot;#HTML5-Pl
      
    
    </summary>
    
      <category term="HTML5+APP" scheme="https://letcoder.cn/categories/HTML5-APP/"/>
    
    
      <category term="Java" scheme="https://letcoder.cn/tags/Java/"/>
    
      <category term="Web前端" scheme="https://letcoder.cn/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo 报错 Cannot read property &#39;replace&#39; of null</title>
    <link href="https://letcoder.cn/2019/08/12/hexo-%E6%8A%A5%E9%94%99-Cannot-read-property-replace-of-null/"/>
    <id>https://letcoder.cn/2019/08/12/hexo-报错-Cannot-read-property-replace-of-null/</id>
    <published>2019-08-12T11:41:24.000Z</published>
    <updated>2019-08-12T11:45:05.625Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><p>hexo配置文件进行相应的修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/qxqzx/qxqzx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>就报错了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FATAL Cannot read property &apos;replace&apos; of null</span><br></pre></td></tr></table></figure><p>解决：</p><blockquote><p>看帖子都是说 _config.yml 配置文件中的url 设置错误</p></blockquote><p>我的设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; url: </span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p>看了下url果然有错，加上url后好了</p><p>执行 hexo g -d 成功。</p><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><p><a href="https://link.jianshu.com?t=https://github.com/hexojs/hexo/issues/2006" target="_blank" rel="noopener">hexo issues #2006</a><br><a href="https://link.jianshu.com?t=https://github.com/hexojs/hexo/issues/2141" target="_blank" rel="noopener">hexo issues #2141</a><br><a href="https://link.jianshu.com?t=http://www.cd2want.cc/2016/06/03/2016-06-03-从jekyll搬到Hexo/" target="_blank" rel="noopener">cd2want</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;hexo配置文件进行相应的修改&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="Hexo" scheme="https://letcoder.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://letcoder.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>新启程，一个新的开始</title>
    <link href="https://letcoder.cn/2019/08/12/%E6%96%B0%E5%90%AF%E7%A8%8B%EF%BC%8C%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://letcoder.cn/2019/08/12/新启程，一个新的开始/</id>
    <published>2019-08-12T11:36:24.000Z</published>
    <updated>2019-08-12T11:40:46.281Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><h2 id="这是一个全新开始"><a href="#这是一个全新开始" class="headerlink" title="这是一个全新开始"></a>这是一个全新开始</h2><p>建立这个新的站点，来记录一些东西。</p><p>以前的站点 用的是typecho已经鸽了一个月，没更新内容。不在打算更新。</p><p>今天开始 转为 Hexo站点，原因是 这个主题太好看了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;h2 id=&quot;这是一个全新开始&quot;&gt;&lt;a href=&quot;#这是一个全新开始&quot; class=&quot;headerlink&quot; title=&quot;这是一个全新开始&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="杂谈" scheme="https://letcoder.cn/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://letcoder.cn/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Hexo新开始</title>
    <link href="https://letcoder.cn/2019/08/12/Hexo%E6%96%B0%E5%BC%80%E5%A7%8B/"/>
    <id>https://letcoder.cn/2019/08/12/Hexo新开始/</id>
    <published>2019-08-12T10:50:11.503Z</published>
    <updated>2019-08-12T11:37:27.680Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Sep 26 2019 10:35:49 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/
      
    
    </summary>
    
      <category term="Hexo" scheme="https://letcoder.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://letcoder.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
