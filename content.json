{"meta":{"title":"QXQZX's blog","subtitle":null,"description":"爱生活, 爱代码, 记录生活, 记录代码","author":"QXQZX","url":"https://letcoder.cn","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-08-12T10:53:23.831Z","updated":"2019-08-12T10:47:17.650Z","comments":false,"path":"/404.html","permalink":"https://letcoder.cn//404.html","excerpt":"","text":""},{"title":"分类","date":"2019-08-12T10:53:23.865Z","updated":"2019-08-12T10:47:17.651Z","comments":false,"path":"categories/index.html","permalink":"https://letcoder.cn/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2019-08-12T10:53:23.855Z","updated":"2019-08-12T10:47:17.651Z","comments":false,"path":"books/index.html","permalink":"https://letcoder.cn/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-08-12T12:00:55.334Z","updated":"2019-08-12T10:47:17.651Z","comments":true,"path":"links/index.html","permalink":"https://letcoder.cn/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-08-12T11:23:56.243Z","updated":"2019-08-12T10:47:17.651Z","comments":false,"path":"repository/index.html","permalink":"https://letcoder.cn/repository/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-08-12T13:07:33.622Z","updated":"2019-08-12T13:07:33.617Z","comments":false,"path":"about/index.html","permalink":"https://letcoder.cn/about/index.html","excerpt":"","text":"12345678910111213141516171819202122232425262728&#123; name: 'QXQZX' age: 19, gender: '男', profession: 'Student &amp; Coder', experience: '0年', address: '山东省淄博市', education: '本科在校', github: 'https://github.com/QXQZX', blog: 'https://letcoder.cn', email: '501966782@qq.com', description: '一杯水，一包烟，一个bug玩一天', skills: [ ['Html', 'JavaScript', 'jQuery', 'CSS', 'ES6', 'Node', 'Bootstrap'], ['Git', 'Linux'], ['Java', 'Spring', 'SpringMVC', 'Mybatis'], ['Mysql'], ['数据结构'] ], devTools: [ ['Sublime Text', 'Visual Studio Code', 'Hbuilder'], ['Chrome DevTools', 'Fiddler'], ['Idea', 'Eclipse'], ['Navicat', 'Terminal'], ] &#125;"},{"title":"标签","date":"2019-08-12T10:53:23.895Z","updated":"2019-08-12T10:47:17.651Z","comments":false,"path":"tags/index.html","permalink":"https://letcoder.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Mybatis查询parameterType多参数问题","slug":"Mybatis查询parameterType多参数问题","date":"2019-08-15T13:32:45.000Z","updated":"2019-08-15T13:46:01.167Z","comments":true,"path":"2019/08/15/Mybatis查询parameterType多参数问题/","link":"","permalink":"https://letcoder.cn/2019/08/15/Mybatis查询parameterType多参数问题/","excerpt":"","text":"Mybatis查询parameterType多参数问题一、单个参数：123456List&lt;EntInfo&gt; findByUsername(String username);&lt;select id=\"findByUsername\" resultMap=\"EntInfoResultMap\" parameterType=\"java.lang.String\" &gt;.......&lt;/select&gt;其中方法名和ID一致，#{} 中的参数名与方法中的参数名一致， 这里采用的是@Param这个参数，实际上@Param这个最后会被Mabatis封装为map类型的。select 后的字段列表要和bean中的属性名一致， 如果不一致的可以用 as 来补充。二、多参数：方案1123456789public List&lt;XXX&gt; getXXX(String xxId, String xxCode); &lt;select id=\"getXXX\" resultType=\"XXX\"&gt; // 不需要写parameterType参数 select t.* from tableName where id = #&#123;0&#125; and name = #&#123;1&#125; &lt;/select&gt; // 由于是多参数那么就不能使用parameterType， 改用#｛index｝是第几个就用第几个的索引，索引从0开始方案2（推荐）基于注解1234567public List&lt;XXXBean&gt; getXXXBeanList(@Param(\"id\")String id, @Param(\"code\")String code); &lt;select id=\"getXXXBeanList\" resultType=\"XXBean\"&gt; select t.* from tableName where id = #&#123;id&#125; and name = #&#123;code&#125; &lt;/select&gt;由于是多参数那么就不能使用parameterType， 这里用@Param来指定哪一个。三、map封装多参数：通过传入map对象查询 并返回user对象的list集合直接通过map里面的key直接访问 #{key}123456public List&lt;User&gt; findUsersByMap(Map&lt;String, Object&gt; map);&lt;!-- 3. 通过传入map对象查询 并返回user对象的list集合 map里面的属性直接访问 --&gt;&lt;select id=\"findUsersByMap\" parameterType=\"hashmap\" resultType=\"user\"&gt; select * from users where sex=#&#123;sex&#125; and username =#&#123;name&#125;&lt;/select&gt;四、List封装多个参数：12345678910public List&lt;XXX&gt; getXXX(List&lt;String&gt; list); &lt;select id=\"getXXXBeanList\" resultType=\"XXBean\"&gt; select 字段... from XXX where id in &lt;foreach item=\"item\" index=\"index\" collection=\"list\" open=\"(\" separator=\",\" close=\")\"&gt; #&#123;item&#125; &lt;/foreach&gt; &lt;/select&gt; // foreach 最后的效果是select 字段... from XXX where id in ('1','2','3','4')","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://letcoder.cn/tags/Java/"}]},{"title":"HTML5+app实现文件上传(java后端)","slug":"HTML5-app实现文件上传-java后端","date":"2019-08-13T12:18:59.000Z","updated":"2019-08-15T13:34:33.681Z","comments":true,"path":"2019/08/13/HTML5-app实现文件上传-java后端/","link":"","permalink":"https://letcoder.cn/2019/08/13/HTML5-app实现文件上传-java后端/","excerpt":"","text":"以拍照上传，相册选择图片上传为例HTML5 Plus 拍照或者相册选择图片上传到服务器起因：正在写一个人脸识别打卡签到的webApp，其中需要一个拍摄照片并上传服务器的功能通过阅读h5+官方文档 了解到有相册 、相机、 文件上传等接口下面学习这几个api：1、从图库选择图片1234567891011121314151617181920212223242526272829303132plus.gallery.pick( function(path) &#123; // path为选择图片的路径 // 下面将图片显示在界面 hui('#img3 div').hide(); hui('#img3 img').attr('src', path); hui('#img3 img').show(); // 上传文件 imgUpload(path); &#125;, function(e) &#123; hui.toast(\"上传失败\"); &#125;, &#123; filter: 'image', system: false &#125;)// 选择多张图片plus.gallery.pick( function(paths)&#123; for(i in paths.files)&#123; hui.toast(paths.files[i]); //imgUpload(path); &#125; &#125;, function(e)&#123; hui.toast('取消了选择'); &#125;,&#123; filter: 'image', multiple: true, maximum: 5 &#125;);2、相机获取图片123456789101112131415plus.camera.getCamera().captureImage( function(path) &#123; // 这个path 不能直接使用 是相对的 需要进行路径转换 var url = \"file://\" + plus.io.convertLocalFileSystemURL(path); // 路径转换 hui('#img2 div').hide(); hui('#img2 img').attr('src', path); hui('#img2 img').show(); imgUpload(path); &#125;, function(e) &#123; hui.toast(\"上传失败\"); &#125;, &#123; index: 2 // 拍照时默认的摄像头 1后置 2 前置 &#125;)3、uploader文件上传原理应该就是通过http 的post请求上传文件12345678910111213141516171819202122232425/** * 图片上传（java后端测试成功） * @param &#123;Object&#125; path */function imgUpload(path) &#123; plus.nativeUI.showWaiting(); var task = plus.uploader.createUpload( 'http://192.168.1.142:8080/img/upload.do', &#123; method: \"POST\" &#125;, function(resp, status) &#123; if (status == 200) &#123; plus.nativeUI.closeWaiting(); console.log(resp.responseText); mui.toast('上传成功'); &#125; else &#123; mui.toast('上传失败'); plus.nativeUI.closeWaiting(); &#125; &#125; ); task.addFile(path, &#123;key: 'file'&#125;); // 这里必须和 java后端的 @RequestParam(value = \"file\") 对应 task.addData(\"name\", \"test\"); task.start();&#125;代码就是上述所写，server为上传的服务端接口地址，如果上传成功，则回调的status会返回200，不成功或者接口参数有问题会返回400或者500。resp.responseText 服务端返回的结果，一般服务端会返回json，解析一下json就可以使用了。传输其他文件时如果还想添加其他参数，用.addData(key,value),添加图片用.addFile(图片路径，{key:后端接收文件的名字})， 这个key必须和后端接收名字对应配合后端代码看会好理解，后端我用java接收的：4、Java后端接收并保存用标准的MultipartFile接收即可。注意xml限制的大小设定springMVC.xml123456&lt;!--配置文件上传--&gt;&lt;bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"&gt; &lt;property name=\"defaultEncoding\" value=\"UTF-8\" /&gt; &lt;!--单位字节--&gt; &lt;property name=\"maxUploadSize\" value=\"20480000\"/&gt;&lt;/bean&gt;1234567891011121314151617181920212223242526272829303132333435@RequestMapping(value = \"/upload\", produces = \"text/html;charset=utf-8\")@ResponseBodypublic String uploadImg(@RequestParam(value = \"file\") MultipartFile file, HttpServletRequest request) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); try &#123; String oriFilename = file.getOriginalFilename(); // 获取文件后缀 String fileType = oriFilename.substring(oriFilename.lastIndexOf(\".\") + 1, oriFilename.length()).toLowerCase(); // 存储路径 String basePath = \"/Users/qxqzx/Desktop/img/\"; // 保存的文件名字 String saveName = String.valueOf(new Date().getTime()) + \".\" + fileType; File dst = new File(basePath, saveName); if (!dst.getParentFile().exists()) &#123; dst.mkdirs(); &#125; file.transferTo(dst); // 写入本地 map.put(\"success\", true); map.put(\"code\", \"200\"); map.put(\"msg\", \"图片上传成功！\"); &#125; catch (IOException e) &#123; e.printStackTrace(); map.put(\"success\", false); map.put(\"code\", \"-200\"); map.put(\"msg\", \"图片上传失败！\"); &#125; return JSON.toJSONString(map);&#125;暂时总结到这, 等后续补充","categories":[{"name":"HTML5+APP","slug":"HTML5-APP","permalink":"https://letcoder.cn/categories/HTML5-APP/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://letcoder.cn/tags/Web前端/"},{"name":"Java","slug":"Java","permalink":"https://letcoder.cn/tags/Java/"}]},{"title":"hexo 报错 Cannot read property 'replace' of null","slug":"hexo-报错-Cannot-read-property-replace-of-null","date":"2019-08-12T11:41:24.000Z","updated":"2019-08-12T11:45:05.625Z","comments":true,"path":"2019/08/12/hexo-报错-Cannot-read-property-replace-of-null/","link":"","permalink":"https://letcoder.cn/2019/08/12/hexo-报错-Cannot-read-property-replace-of-null/","excerpt":"","text":"hexo配置文件进行相应的修改1234deploy: type: git repo: https://github.com/qxqzx/qxqzx.github.io.git branch: master执行命令1hexo g -d就报错了：1FATAL Cannot read property &apos;replace&apos; of null解决：看帖子都是说 _config.yml 配置文件中的url 设置错误我的设置：12345# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; url: root: /permalink: :year/:month/:day/:title/permalink_defaults:看了下url果然有错，加上url后好了执行 hexo g -d 成功。参考链接hexo issues #2006hexo issues #2141cd2want","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://letcoder.cn/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://letcoder.cn/tags/Hexo/"}]},{"title":"新启程，一个新的开始","slug":"新启程，一个新的开始","date":"2019-08-12T11:36:24.000Z","updated":"2019-08-12T11:40:46.281Z","comments":true,"path":"2019/08/12/新启程，一个新的开始/","link":"","permalink":"https://letcoder.cn/2019/08/12/新启程，一个新的开始/","excerpt":"","text":"这是一个全新开始建立这个新的站点，来记录一些东西。以前的站点 用的是typecho已经鸽了一个月，没更新内容。不在打算更新。今天开始 转为 Hexo站点，原因是 这个主题太好看了","categories":[{"name":"杂谈","slug":"杂谈","permalink":"https://letcoder.cn/categories/杂谈/"}],"tags":[{"name":"杂谈","slug":"杂谈","permalink":"https://letcoder.cn/tags/杂谈/"}]},{"title":"Hexo新开始","slug":"Hexo新开始","date":"2019-08-12T10:50:11.503Z","updated":"2019-08-12T11:37:27.680Z","comments":true,"path":"2019/08/12/Hexo新开始/","link":"","permalink":"https://letcoder.cn/2019/08/12/Hexo新开始/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new \"My New Post\"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://letcoder.cn/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://letcoder.cn/tags/Hexo/"}]}]}